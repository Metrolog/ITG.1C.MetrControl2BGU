Перем мКомментарий;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ СПРАВОЧНИКОВ 
&НаКлиенте
Процедура CUSTOMER_ACTUAL(Кнопка)
	
	ЗагрузитьТаблицу(Кнопка.Имя, "SELECT c.INN, c.KPP,c.CUSTOMER_ID, c.ENTITY_ID, c.CUSTOMER_NAME, c.POSTCODE, c.ADDRESS_FACT , c.POSTCODE_FACT, c.ADDRESS , m.OneC_ID
	//	|FROM  CUSTOMER_ACTUAL c
	|FROM  CUSTOMER c
	|LEFT JOIN MATCH_TABLE m ON c.ENTITY_ID = m.Metro_ID
	|WHERE EXISTS (
	|	SELECT TOP 1 o.CUSTOMER_ID
	|	FROM ORDER_HEAD_ACTUAL o 
	|	WHERE  (c.ENTITY_ID = o.CUSTOMER_ID) OR (c.CUSTOMER_ID = o.CUSTOMER_ID)) AND c.DELETE_DATE IS NULL AND c.OWNER = '40004'");
	//	|	WHERE  (c.ENTITY_ID = o.CUSTOMER_ID) OR (c.CUSTOMER_ID = o.CUSTOMER_ID)) AND c.OWNER = '40004'");
	//ЗагрузитьТаблицу(Кнопка.Имя, "SELECT c.INN, c.KPP,c.CUSTOMER_ID, c.ENTITY_ID, c.CUSTOMER_NAME 
	//|FROM CUSTOMER_ACTUAL c
	//|GROUP BY c.INN, c.KPP,c.CUSTOMER_ID, c.ENTITY_ID, c.CUSTOMER_NAME
	//|HAVING NOT c.INN IS NULL");	
	
	СопоставитьсЛокальнымСправочникомКонтрагенты();
	
КонецПроцедуры

&НаКлиенте
Процедура DEPARTMENT_ACTUAL(Кнопка)
	
	ТабличнаяЧастьПодразделения.Очистить();	
	ЗагрузитьТаблицу(Кнопка.Имя,"SELECT *
	|FROM DEPARTMENT_ACTUAL d
	|LEFT JOIN MATCH_TABLE_DEPARTMENT m ON m.Metro_ID = d.DEPARTMENT_ID ");
	
КонецПроцедуры

Процедура ORDER_HEAD(Элемент)
	
	Если Не ЗначениеЗаполнено(ОсновнаяНоменклатураУслугиКалибровка) Тогда
		ОсновнаяНоменклатураУслугиКалибровка = ОсновнаяНоменклатураУслугиПоверка;
		Сообщить("Номенклатура услуги |Калибровка| не выбрана на закладке Сервис");	
	КонецЕсли;	
	
	ЗагрузитьТаблицу(Элемент.Имя,"
	|SELECT * 
	|FROM 
	|(
	|SELECT 
	|	u.URGENCY_NAME
	|	, u.RAISE
	|	, NDS
	|	, TARIF_ACTUAL
	|	, SUM_ACTUAL SUM_ACTUAL
	|	, NDS_ACTUAL NDS_ACTUAL
	|	, SUMwitnNDS_ACTUAL SUMwitnNDS_ACTUAL
	|	, p.QTY
	|	, c.ENTITY_ID
	|	, c.CUSTOMER_NAME
	|	, c.LOCAL_CODE
	|	, o.LOCAL_ID 
	|	, o.ORDER_ID   
	|	, o.TRANSPORT_COST
	|	, o.TRAVELING_ALLOWANCE
	|	, o.ORDER_CLOSED
	|	, c.INN     
	|	, c.KPP
	|	, c.ADDRESS
	|	, c.POSTCODE
	|	, c.ADDRESS_FACT
	|	, c.POSTCODE_FACT
	|	, o.CUSTOMER_ID	
	|	, o.DATE	
	|	, o.BILLF_DATE	
	|FROM
	|	ORDER_HEAD_ACTUAL o
	//	|		LEFT JOIN CUSTOMER_ACTUAL c ON c.CUSTOMER_ID = o.CUSTOMER_ID
	|		LEFT JOIN CUSTOMER c ON c.CUSTOMER_ID = o.CUSTOMER_ID
	|		LEFT JOIN URGENCY_ACTUAL u ON u.URGENCY_ID = o.URGENCY_ID
	|		LEFT JOIN (
	|			SELECT
	|				ORDER_POS.ORDER_ID
	|				, SUM(ORDER_POS.QTY) as QTY
	|				, SUM(ORDER_POS.TARIF_ACTUAL) as TARIF_ACTUAL
	|				, SUM(ORDER_POS.SUM_ACTUAL) as SUM_ACTUAL
	|				, SUM(ORDER_POS.NDS_ACTUAL) as NDS_ACTUAL
	|				, SUM(ORDER_POS.NDS_ACTUAL + ORDER_POS.SUM_ACTUAL)  as SUMwitnNDS_ACTUAL
	|			FROM
	|					(
	|				SELECT
	|					ORDER_POS.ORDER_ID
	|					, CAST( ORDER_POS.QTY as decimal(10,2)) QTY
	|					, CAST( ORDER_POS.TARIF_ACTUAL as decimal(10,2)) TARIF_ACTUAL
	|					, CAST( t.RAISE * (ORDER_POS.TARIF_ACTUAL * ORDER_POS.QTY) as decimal(10,2)) SUM_ACTUAL
	|					, CAST( t.RAISE * (ORDER_POS.TARIF_ACTUAL * ORDER_POS.QTY) * 0.18 as decimal(10,2))  NDS_ACTUAL
	|				FROM
	|					ORDER_POS_ACTUAL ORDER_POS
	|					INNER JOIN (
	|								SELECT 
	|									o.ORDER_ID 
	|									,o.NDS
	|									, u.RAISE 
	|									FROM ORDER_HEAD o
	|										LEFT JOIN URGENCY_ACTUAL u ON u.URGENCY_ID = o.URGENCY_ID
	|					 )
	|				  t ON t.ORDER_ID = ORDER_POS.ORDER_ID
	|				) ORDER_POS
	|			GROUP BY
	|				ORDER_POS.ORDER_ID
	|		) p ON  p.ORDER_ID = o.ORDER_ID
	|  WHERE o.BILLF_DATE > '"+Формат(НачалоДня(НачПериода)-1,"ДФ=yyyy-MM-dd")+"'
	|  AND o.BILLF_DATE < '"+Формат(КонецДня(КонПериода)+1,"ДФ=yyyy-MM-dd")+"'
	|) t
	| LEFT JOIN MATCH_TABLE m ON m.Metro_ID = t.ENTITY_ID
	|;
	|  ");
	
	ТабличнаяЧастьЗаказы.Сортировать("Дата1");
	
КонецПроцедуры

Процедура MATCH_TABLE(Элемент)
	СоздатьТаблицу(Элемент.Имя);
КонецПроцедуры

Процедура СоздатьТаблицу(КомандаИмя)
	
	СтрокаСоединения = 
	"Provider=SQLOLEDB.1;
	|User ID="+UserID+";
	|Pwd="+Pwd+";
	|Data Source="+DataSource+";
	|Initial Catalog="+InitialCatalog+"";
	
	ЗапросSQL = 	
	"CREATE TABLE "+InitialCatalog+".dbo.MATCH_TABLE" +	
	"(OneC_ID char(12) NULL," +		
	"Metro_ID bigint NOT NULL" + 		
	")  ON [PRIMARY]";
	
	
	
	
	Connection  = Новый COMОбъект("ADODB.Connection");
	Command     = Новый COMОбъект("ADODB.Command");
	RecordSet   = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		Connection.Open(СокрЛП(СтрокаСоединения));
		Command.ActiveConnection   = Connection;
		Command.CommandText = ЗапросSQL;
		RecordSet = Command.Execute();
		
		Connection.Close();
		RecordSet = Неопределено;
		Command = Неопределено;
		Сообщить("Создана таблица:" + КомандаИмя);
		
	Исключение
		Сообщить("Ошибка:" + ОписаниеОшибки());
		RecordSet = Неопределено;
		Command = Неопределено;
	КонецПопытки;  
	
КонецПроцедуры

Процедура ЗагрузитьТаблицу(КомандаИмя, ЗапросSQL = Неопределено)
	
	Если КомандаИмя = "CUSTOMER_ACTUAL" Тогда
		ТабличнаяЧастьКонтрагенты.Очистить();
	ИначеЕсли КомандаИмя = "ORDER_HEAD" Тогда
		ТабличнаяЧастьЗаказы.Очистить();
	КонецЕсли;
	
	СтрокаСоединения = 
	"Provider=SQLOLEDB.1;
	|User ID="+UserID+";
	|Pwd="+Pwd+";
	|Data Source="+DataSource+";
	|Initial Catalog="+InitialCatalog+"";
	
	Если ЗапросSQL = Неопределено Тогда
		ЗапросSQL = "SELECT * FROM " + КомандаИмя;
	КонецЕсли;
	//модификация запроса для подсчета количества записей
	поз = Найти(ЗапросSQL,"FROM");
	ЗапросSQLCount = "SELECT TOP 1000 COUNT(*) " + Сред(ЗапросSQL, поз);
	//---------------------------------------------------
	
	Connection  = Новый COMОбъект("ADODB.Connection");
	Command     = Новый COMОбъект("ADODB.Command");
	RecordSet   = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		Connection.Open(СокрЛП(СтрокаСоединения));
		Command.ActiveConnection   = Connection;
		
		//узнать количество записей
		Command.CommandText = ЗапросSQLCount;
		RecordSet = Command.Execute();
		Если НЕ Recordset.EOF Тогда
			RecordsetFieldsCount = Recordset.Fields(0).Value;   
		КонецЕсли;
		MessagePageSize  = Окр(RecordsetFieldsCount);
		RecordsetCount   = 0;
		MessagePageCount = 0;
		ЭлементыФормы.Индикатор1.МаксимальноеЗначение = RecordsetFieldsCount; Индикатор1 = 0;
		//--------------------------
		
		Если RecordsetFieldsCount = 0 Тогда
			Сообщить("Пустой результат выборки");
			Возврат;	
		КонецЕсли;	
		
		Command.CommandText = ЗапросSQL;
		RecordSet = Command.Execute();
		RecordSet.MoveFirst();  
		
		Пока Не RecordSet.EOF Цикл
			Если MessagePageCount = MessagePageSize Тогда 
				//Сообщить("Прогресс = " + Строка(Окр((RecordsetCount/RecordsetFieldsCount)*100))+ " ЗаписьНомер = "+RecordsetCount);
				MessagePageCount = 0;
			КонецЕсли;
			MessagePageCount = MessagePageCount + 1;
			RecordsetCount = RecordsetCount+1;
			Индикатор1 = RecordsetCount;
			
			ОбработатьСтроку(КомандаИмя, RecordSet);
			RecordSet.MoveNext();
		КонецЦикла;
		
		Connection.Close();
		RecordSet = Неопределено;
		Command = Неопределено;
		
	Исключение
		Сообщить("Ошибка:" + ОписаниеОшибки());
		RecordSet = Неопределено;
		Command = Неопределено;
	КонецПопытки;  
	
	
	
КонецПроцедуры

Процедура СопоставитьсЛокальнымСправочникомКонтрагенты()
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Вес,
	|	Т.Регион1,
	|	Т.Адрес1,
	|	Т.фАдрес1,
	|	Т.ИНН1,
	|	Т.КПП1,
	|	Т.Код1,
	|	Т.CUSTOMER_ID,
	|	Т.OneC_ID,
	|	Т.Наименование1
	|	 ПОМЕСТИТЬ ВТ0 ИЗ &Т КАК Т 
	//	|	ГДЕ НЕ Т.ИНН1 = &Пусто И НЕ Т.КПП1 = &Пусто
	|	ГДЕ НЕ Т.ИНН1 = &Пусто 
	|;
	|ВЫБРАТЬ 
	|	1 КАК Вес,
	|	Контрагенты.Ссылка,
	|	Контрагенты.Код,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП,
	|	Контрагенты.НаименованиеПолное КАК Наименование
	|ПОМЕСТИТЬ ВТ1
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|Где НЕ Контрагенты.ИНН = &Пусто И НЕ Контрагенты.ПометкаУдаления = Истина
	|;
	|ВЫБРАТЬ Различные
	|	Т0.Регион1,
	|	Т0.Адрес1,
	|	Т0.фАдрес1,
	|	Т0.ИНН1 КАК ИНН1,
	|	Т1.ИНН КАК ИНН0,
	|	Т0.КПП1 КАК КПП1,
	|	Т1.КПП КАК КПП0,
	|	Т0.Наименование1 КАК Наименование1,
	|	Т1.Наименование КАК Наименование0,
	|	Т1.Ссылка КАК Контрагент0,
	|	Т0.Код1 КАК Код1,
	|	Т0.OneC_ID КАК OneC_ID,
	|	Т0.CUSTOMER_ID,
	|	Т1.Код КАК Код0
	|ПОМЕСТИТЬ ВТ2
	|	ИЗ ВТ0 КАК Т0
	|	
	|	ПОЛНОЕ СОЕДИНЕНИЕ ВТ1 КАК Т1
	|	ПО Т1.ИНН = Т0.ИНН1
	|	И Т1.КПП = Т0.КПП1
	|;
	|//определение количества дублей ИНН1 КПП1
	|ВЫБРАТЬ 
	|	Т0.Код1,
	|	СУММА(1) КАК Вес1
	|ПОМЕСТИТЬ ВТВес1
	|	ИЗ ВТ2 КАК Т0 
	|СГРУППИРОВАТЬ ПО Т0.Код1
	|;
	|//определение количества дублей ИНН0 ИНН0
	|ВЫБРАТЬ 
	|	Т0.Код0,
	|	СУММА(1) КАК Вес0
	|ПОМЕСТИТЬ ВТВес0
	|	ИЗ ВТ2 КАК Т0 
	|СГРУППИРОВАТЬ ПО Т0.Код0
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Регион1,
	|	Т.Адрес1,
	|	Т.фАдрес1,
	|	ТВес0.Вес0 КАК Вес0,
	|	ТВес1.Вес1 КАК Вес1,
	|	Т.Контрагент0 КАК Контрагент0,
	|	Т.Контрагент0 КАК Контрагент1,
	|	Т.ИНН1 КАК ИНН1,
	|	Т.ИНН0 КАК ИНН0,
	|	Т.КПП1 КАК КПП1,
	|	Т.КПП0 КАК КПП0,
	|	Т.Наименование1 КАК Наименование1,
	|	Т.Наименование0 КАК Наименование0,
	|	Т.OneC_ID КАК OneC_ID,
	|	Т.CUSTOMER_ID,
	|	Т.Код1 КАК Код1,
	|	Т.Код0 КАК Код0
	|	ИЗ ВТ2 КАК Т
	|	Левое СОЕДИНЕНИЕ ВТВес1 КАК ТВес1
	|	ПО Т.Код1 = ТВес1.Код1
	|	Левое СОЕДИНЕНИЕ ВТВес0 КАК ТВес0
	|	ПО Т.Код0 = ТВес0.Код0 
	|УПОРЯДОЧИТЬ ПО
	|	ИНН0,
	|	ИНН1
	|;
	|УНИЧТОЖИТЬ ВТ0;
	|УНИЧТОЖИТЬ ВТ1;
	|УНИЧТОЖИТЬ ВТ2;
	|УНИЧТОЖИТЬ ВТВес0;
	|УНИЧТОЖИТЬ ВТВес1;
	|";
	Если Не ТипКонтрагента Тогда //ФизЛица
		//		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ НЕ Т.ИНН1 = &Пусто И НЕ Т.КПП1 = &Пусто","ГДЕ Т.ИНН1 = &Пусто И Т.КПП1 = &Пусто");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ НЕ Т.ИНН1 = &Пусто","ГДЕ Т.ИНН1 = &Пусто");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Где НЕ Контрагенты.ИНН = &Пусто И НЕ Контрагенты.ПометкаУдаления = Истина","Где Контрагенты.ВидКонтрагента = &ВидКонтрагентаФизЛицо И НЕ Контрагенты.ПометкаУдаления = Истина");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПО Т1.ИНН = Т0.ИНН1","ПО Т1.Наименование = Т0.Наименование1");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Т1.КПП = Т0.КПП1","");	
	КонецЕсли;	
	
	Если Не СопостовлятьПоКПП Тогда //не учитывать КПП
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Т1.КПП = Т0.КПП1","");	
	КонецЕсли;	
	
	
	Запрос.УстановитьПараметр("Т",ТабличнаяЧастьКонтрагенты);
	Запрос.УстановитьПараметр("Пусто","");
	Запрос.УстановитьПараметр("ВидКонтрагентаФизЛицо",Перечисления.ВидыКонтрагентов.ФизЛицо);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ТабличнаяЧастьКонтрагенты.Очистить();
	
	ЭлементыФормы.Индикатор1.МаксимальноеЗначение = ВыборкаДетальныеЗаписи.Количество(); Индикатор1 = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сТабличнаяЧастьКонтрагенты = ТабличнаяЧастьКонтрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(сТабличнаяЧастьКонтрагенты,ВыборкаДетальныеЗаписи);
		//	сТабличнаяЧастьКонтрагенты.нENTITY_ID0 = сТабличнаяЧастьКонтрагенты.Контрагент1.нENTITY_ID;
		Если ЗначениеЗаполнено(сТабличнаяЧастьКонтрагенты.Код0) Тогда
			сТабличнаяЧастьКонтрагенты.Сопоставлен = сТабличнаяЧастьКонтрагенты.Код0 = сТабличнаяЧастьКонтрагенты.OneC_ID;
		КонецЕсли;
		
		Индикатор1 = Индикатор1 + 1;
		
		//Если ТипКонтрагента Тогда //Адрес только для Юр лиц
		//	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент0) Тогда
		//		СтруктураРеквизитовК = Новый Структура("КИКонтрагента");
		//		ПолучениеНСИ.ПолучитьДанные(ВыборкаДетальныеЗаписи.Контрагент0, ТекущаяДата(), СтруктураРеквизитовК);
		//		
		//		сТабличнаяЧастьКонтрагенты.Адрес0 = СтруктураРеквизитовК.ЮрАдресКонтрагента;
		//	КонецЕсли;	
		//КонецЕсли;	
	КонецЦикла;
	
	//	ЭлементыФормы.ТабличноеПоле1.ОтборСтрок.Сбросить();
	//	ФильтрСопоставленныеПереключить();
	
	
КонецПроцедуры

Процедура ОбработатьСтроку(КомандаИмя, RecordSet)
	
	Если КомандаИмя = "CUSTOMER_ACTUAL" Тогда
		cТЧ = ТабличнаяЧастьКонтрагенты.Добавить();
		cТЧ.ИНН1 = СокрЛП(RecordSet.Fields("INN").Value);
		cТЧ.КПП1 = СокрЛП(RecordSet.Fields("KPP").Value);
		cТЧ.Код1 = Формат(RecordSet.Fields("ENTITY_ID").Value,"ЧГ=");
		cТЧ.CUSTOMER_ID = Формат(RecordSet.Fields("CUSTOMER_ID").Value,"ЧГ=");
		cТЧ.Наименование1 = RecordSet.Fields("CUSTOMER_NAME").Value;
		cТЧ.Адрес1 = "" + RecordSet.Fields("POSTCODE").Value +", "+ RecordSet.Fields("ADDRESS").Value;
		cТЧ.фАдрес1 = "" + RecordSet.Fields("POSTCODE_FACT").Value +", "+ RecordSet.Fields("ADDRESS_FACT").Value;
		cТЧ.OneC_ID = RecordSet.Fields("OneC_ID").Value;
	ИначеЕсли КомандаИмя = "DEPARTMENT_ACTUAL" Тогда
		cТЧ = ТабличнаяЧастьПодразделения.Добавить();
		cТЧ.Наименование = RecordSet.Fields("DEPARTMENT_NAME").Value;
		cТЧ.Код = Формат(RecordSet.Fields("DEPARTMENT_ID").Value,"ЧГ=");
		cТЧ.НаправленияДеятельности = Справочники.НаправленияДеятельности.НайтиПоКоду(Формат(RecordSet.Fields("OneC_ID").Value,"ЧГ="));
	ИначеЕсли КомандаИмя = "ORDER_POS_ACTUAL" Тогда
		cТЧ = ТабличнаяЧастьУслуги.Добавить();
		//	cТЧ.Содержание = ""+RecordSet.Fields("WORK_TYPE_NAME").Value +"; "+RecordSet.Fields("DEVICE_NAME").Value;
		cТЧ.Содержание = ""+RecordSet.Fields("DEVICE_NAME").Value+" "+RecordSet.Fields("DEVICE_MARK").Value;
		cТЧ.Количество = RecordSet.Fields("QTY").Value;
		cТЧ.Цена = RecordSet.Fields("TARIF_ACTUAL").Value;
		cТЧ.Сумма = cТЧ.Цена * cТЧ.Количество;
		cТЧ.КодНаправленияДеятельности = Формат(RecordSet.Fields("OneC_ID").Value,"ЧГ=");
	ИначеЕсли КомандаИмя = "ORDER_HEAD" Тогда
		cТЧ = ТабличнаяЧастьЗаказы.Добавить();
		cТЧ.Номер = RecordSet.Fields("LOCAL_ID").Value;
		cТЧ.Дата1  = RecordSet.Fields("BILLF_DATE").Value;
		cТЧ.Наименование1 = RecordSet.Fields("CUSTOMER_NAME").Value;
		cТЧ.ИНН1 = СокрЛП(RecordSet.Fields("INN").Value);
		cТЧ.КПП1 = СокрЛП(RecordSet.Fields("KPP").Value);
		cТЧ.ORDER_ID = Строка(Формат(RecordSet.Fields("ORDER_ID").Value,"ЧГ="));
		cТЧ.Код1 = Строка(Формат(RecordSet.Fields("ENTITY_ID").Value,"ЧГ="));
		cТЧ.OneC_ID = Строка(Формат(RecordSet.Fields("OneC_ID").Value,"ЧГ="));
		
		cТЧ.Адрес1 = "" + RecordSet.Fields("POSTCODE").Value +", "+ RecordSet.Fields("ADDRESS").Value;
		cТЧ.фАдрес1 = "" + RecordSet.Fields("POSTCODE_FACT").Value +", "+ RecordSet.Fields("ADDRESS_FACT").Value;
		
		Если НЕ ЗначениеЗаполнено(cТЧ.ИНН1) И НЕ ЗначениеЗаполнено(RecordSet.Fields("CUSTOMER_NAME").Value) Тогда
			cТЧ.Контрагент1 = Справочники.Контрагенты.ПустаяСсылка();
		ИначеЕсли ЗначениеЗаполнено(cТЧ.OneC_ID) Тогда
			cТЧ.Контрагент1 = Справочники.Контрагенты.НайтиПоКоду(cТЧ.OneC_ID);
			Если cТЧ.Контрагент1.Пустая() Тогда
				cТЧ.Комментарий = "! контрагент сопоставлен, но не найден по коду 1С:" + cТЧ.OneC_ID + " "+RecordSet.Fields("CUSTOMER_NAME").Value;
				Сообщить("! контрагент сопоставлен, но не найден по коду 1С:" + cТЧ.OneC_ID + " " +RecordSet.Fields("CUSTOMER_NAME").Value);
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(cТЧ.ИНН1) Тогда
			cТЧ.Контрагент1 = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", cТЧ.ИНН1);
		Иначе
			cТЧ.Контрагент1 = Справочники.Контрагенты.НайтиПоРеквизиту("НаименованиеПолное", СокрЛП(RecordSet.Fields("CUSTOMER_NAME").Value));
		КонецЕсли;
		
		//Если RecordSet.Fields("INN").Value = "5321063033  " Тогда
		//	Сообщить(""+RecordSet.Fields("INN").Value+" "+RecordSet.Fields("CUSTOMER_NAME").Value);	
		//КонецЕсли;	
		//
		//Если cТЧ.Контрагент1.Пустая() Тогда
		//	Сообщить(""+RecordSet.Fields("INN").Value+" "+RecordSet.Fields("CUSTOMER_NAME").Value);	
		//КонецЕсли;	
		
		cТЧ.КоэффициентНаценки = RecordSet.Fields("RAISE").Value;
		cТЧ.СуммаДоставкиБезНДС = RecordSet.Fields("TRANSPORT_COST").Value;
		cТЧ.СуммаКомандировочныхБезНДС = RecordSet.Fields("TRAVELING_ALLOWANCE").Value;
		cТЧ.ЗаказЗакрыт = RecordSet.Fields("ORDER_CLOSED").Value;
		//СуммаБезНДС1 = ?(ЗначениеЗаполнено(RecordSet.Fields("SUM_ACTUAL").Value),RecordSet.Fields("SUM_ACTUAL").Value,0);
		//СуммаБезНДС1 = (СуммаБезНДС1 * cТЧ.КоэффициентНаценки) + cТЧ.СуммаДоставкиБезНДС + cТЧ.СуммаКомандировочныхБезНДС;
		cТЧ.СтавкаНДС1  = ?(ЗначениеЗаполнено(RecordSet.Fields("NDS").Value),RecordSet.Fields("NDS").Value,0);
		cТЧ.СтавкаНДС1 = cТЧ.СтавкаНДС1/100;
		cТЧ.СуммаБезНДС1  = ?(ЗначениеЗаполнено(RecordSet.Fields("SUM_ACTUAL").Value),RecordSet.Fields("SUM_ACTUAL").Value,0);
		cТЧ.СуммаНДС1  = ?(ЗначениеЗаполнено(RecordSet.Fields("NDS_ACTUAL").Value),RecordSet.Fields("NDS_ACTUAL").Value,0);
		cТЧ.СуммаВсегоСНДС1 = cТЧ.СуммаБезНДС1 + cТЧ.СуммаНДС1 + cТЧ.СуммаДоставкиБезНДС + cТЧ.СуммаДоставкиБезНДС*cТЧ.СтавкаНДС1 + cТЧ.СуммаКомандировочныхБезНДС + cТЧ.СуммаКомандировочныхБезНДС*cТЧ.СтавкаНДС1;
		НДС_СчетФактураВыданный = ВернутьДокументСсылкаПоРеквизиту("НДС_СчетФактураВыданный", "Номер", Строка(Формат(RecordSet.Fields("LOCAL_ID").Value,"ЧГ=")), RecordSet.Fields("DATE").Value,"Год");
		cТЧ.АктОбОказанииУслуг  = НДС_СчетФактураВыданный.ДокументОснование;
		
		Если Не ЗначениеЗаполнено(cТЧ.АктОбОказанииУслуг) Тогда
			cТЧ.АктОбОказанииУслуг = ВернутьДокументСсылкаПоРеквизиту("УслугиОказанные", "Номер", Строка(Формат(RecordSet.Fields("LOCAL_ID").Value,"ЧГ=")), RecordSet.Fields("DATE").Value,"Год");
			Если ЗначениеЗаполнено(cТЧ.АктОбОказанииУслуг) Тогда
				Сообщить(""+Строка(Формат(RecordSet.Fields("LOCAL_ID").Value,"ЧГ=")) + " не обраружена СФ выданная");	
				cТЧ.Комментарий = ""+Строка(Формат(RecordSet.Fields("LOCAL_ID").Value,"ЧГ=")) + " не обраружена СФ выданная";
			Иначе
				
			КонецЕсли;	
		Иначе
			cТЧ.Комментарий = cТЧ.АктОбОказанииУслуг.Комментарий;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(НДС_СчетФактураВыданный.ДокументОснование) Тогда
			cТЧ.Дата0  = НДС_СчетФактураВыданный.ДокументОснование.Дата;
			cТЧ.Контрагент0  = НДС_СчетФактураВыданный.ДокументОснование.Дата;
			cТЧ.Контрагент0 = НДС_СчетФактураВыданный.ДокументОснование.Контрагент;
			cТЧ.СуммаВсегоСНДС0 = НДС_СчетФактураВыданный.ДокументОснование.СуммаДокумента;
			//	cТЧ.Загружать = Ложь;
		Иначе
			
			cТЧ.Дата0  = "";
			cТЧ.Контрагент0 = "";
			//	cТЧ.Загружать = Истина;
		КонецЕсли;	
		//	cТЧ.Сумма = RecordSet.Fields("CUSTOMER_NAME").Value;
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьСоответствиеКонтрагентовНажатие(Элемент)
	//
	//Отбор = Новый Структура("Загружать",Истина);    
	//МассивЗаказов = новый СписокЗначений; 
	//МассивЗаказов = ТабличнаяЧастьЗаказы.НайтиСтроки(Новый Структура("Загружать",Истина));
	//
	//Если МассивЗаказов.Количество()=0 Тогда
	//	Возврат;
	//КонецЕсли;
	тСтрока = ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока;
	
	//Если НЕ ТипКонтрагента Тогда
	//	Если НЕ ЗначениеЗаполнено(тСтрока.Контрагент0) Тогда
	//		СоздатьКонтрагента(тСтрока);
	//	КонецЕсли;	
	//КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(тСтрока.Контрагент0) Тогда
		СоздатьКонтрагента(тСтрока);
	Иначе	
		
		Если тСтрока.Вес1 > 1 Тогда 
			Предупреждение("В справочнике Контрагенты 1С найдено двойников: " + тСтрока.Вес1 + Символы.ПС+"Нужно пометить на удаление двойные элементы в 1С");
			Возврат;
		Иначе
			МассивКонтрагентов = новый СписокЗначений; 
			Если  ТипКонтрагента Тогда
				МассивКонтрагентов = ТабличнаяЧастьКонтрагенты.НайтиСтроки(Новый Структура("ИНН1,КПП1",тСтрока.ИНН1,тСтрока.КПП1));
			Иначе	
				МассивКонтрагентов = ТабличнаяЧастьКонтрагенты.НайтиСтроки(Новый Структура("Наименование1,Наименование0",тСтрока.Наименование1,тСтрока.Наименование0));
			КонецЕсли;
			
			кУдалить = 0;
			cУдалить = "";
			кУдалить = МассивКонтрагентов.Количество()-1;
			
			кПереименовать = 0;
			cПереименовать = "";
			Для Каждого тМассив Из МассивКонтрагентов Цикл
				Если (тМассив.Наименование1<>тМассив.Наименование0) ИЛИ (Не тМассив.КПП1 = тСтрока.КПП0) Тогда
					кПереименовать = кПереименовать + 1;
					cПереименовать = "" + тМассив.Наименование1+" -> "+тМассив.Наименование0 + ?(Не тМассив.КПП1 = тСтрока.КПП0," и КПП: "+тСтрока.КПП1+" -> "+тМассив.КПП0,"");
				КонецЕсли;	
				Если Не тМассив.Код1 = тСтрока.Код1 Тогда
					cУдалить = cУдалить + ", " + тМассив.Код1;
				КонецЕсли;	
			КонецЦикла;   		
			cУдалить = Сред(cУдалить,2);
			
			Если тСтрока.Вес0 > 1 Тогда
				кПереименовать = 0;	
			КонецЕсли;
			
			Если кПереименовать + кУдалить = 0 Тогда
				Возврат;
			КонецЕсли;
			
			Ответ = Вопрос(""+?( кУдалить > 0,"Будет удалено элементов МетроКонтроля: " + кУдалить + ": "+cУдалить +  Символы.ПС,"") + 
			?(кПереименовать > 0,"Будет переименовано элементов МетроКонтроля: " + кПереименовать + ": " + cПереименовать + Символы.ПС,"") + 
			"Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли; 
			
		КонецЕсли; 
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	Т.Вес0,
		//|	Т.ИНН1,
		//|	Т.КПП1,
		//|	Т.Код1,
		//|	Т.CUSTOMER_ID,
		//|	Т.Наименование1,
		//|	Т.Наименование0
		//|ПОМЕСТИТЬ ВТ0
		//|ИЗ &Т КАК Т 
		//|	ГДЕ Т.ИНН1 = &ИНН И Т.КПП1 = &КПП
		//|;
		//|ВЫБРАТЬ
		//|	*
		//|	ИЗ ВТ0 КАК Т
		//|;
		//|УНИЧТОЖИТЬ ВТ0;
		//|";
		//Запрос.УстановитьПараметр("Т",ТабличнаяЧастьКонтрагенты);
		//Запрос.УстановитьПараметр("Наименование",тСтрока.Наименование1);
		//Запрос.УстановитьПараметр("ИНН",тСтрока.ИНН1);
		//Запрос.УстановитьПараметр("КПП",тСтрока.КПП1);
		//Запрос.УстановитьПараметр("Код",тСтрока.Код1);
		//
		//Если НЕ ТипКонтрагента Тогда
		//	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ГДЕ Т.ИНН1 = &ИНН И Т.КПП1 = &КПП","ГДЕ Т.Наименование1 = &Наименование");	
		//КонецЕсли;
		
		//ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Для Каждого ВыборкаДетальныеЗаписи Из МассивКонтрагентов Цикл
			//		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			CUSTOMER_ID = (ВыборкаДетальныеЗаписи.CUSTOMER_ID);
			ИНН = (тСтрока.ИНН1);
			
			СтрокаСоединения = 
			"Provider=SQLOLEDB.1;
			|User ID="+UserID+";
			|Pwd="+Pwd+";
			|Data Source="+DataSource+";
			|Initial Catalog="+InitialCatalog+"";
			
			
			Если ВыборкаДетальныеЗаписи.Код1 = тСтрока.Код1 Тогда //СОКРЛП
				
				Если ВыборкаДетальныеЗаписи.Вес0 > 1 Тогда
					Продолжить; //в первый проход только удаление
				КонецЕсли;
				Если ВыборкаДетальныеЗаписи.Наименование1 = ВыборкаДетальныеЗаписи.Наименование0 И ВыборкаДетальныеЗаписи.КПП1 = ВыборкаДетальныеЗаписи.КПП0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗапросSQL = "USE "+InitialCatalog+";
				|Update CUSTOMER_ACTUAL
				|SET 
				|CUSTOMER_ACTUAL.CUSTOMER_NAME = '"+(ВыборкаДетальныеЗаписи.Наименование0)+"', 
				|CUSTOMER_ACTUAL.KPP = '"+(ВыборкаДетальныеЗаписи.КПП0)+"' 
				|WHERE CUSTOMER_ACTUAL.CUSTOMER_ID = " +CUSTOMER_ID+";
				|";
				ТипОперации = " Изменение: "; 
			Иначе
				ЗапросSQL = "USE "+InitialCatalog+";
				|DELETE FROM CUSTOMER_ACTUAL
				|WHERE CUSTOMER_ACTUAL.CUSTOMER_ID = "+CUSTOMER_ID+";
				|";
				ТипОперации = " Удаление: ";
			КонецЕсли;	
			
			
			Connection  = Новый COMОбъект("ADODB.Connection");
			Command     = Новый COMОбъект("ADODB.Command");
			RecordSet   = Новый COMОбъект("ADODB.RecordSet");
			
			Попытка
				Connection.Open(СокрЛП(СтрокаСоединения));
				Command.ActiveConnection   = Connection;
				
				Command.CommandText = ЗапросSQL;
				RecordSet = Command.Execute();
				Connection.Close();
				RecordSet = Неопределено;
				Command = Неопределено;
				ДобавитьЗаписьВЛогФайл(LogCatalog, ""+ТипОперации+" запись Наименование1 = " + ВыборкаДетальныеЗаписи.Наименование1 + "; ИНН = " + ВыборкаДетальныеЗаписи.ИНН1+ "; CUSTOMER_ID = " + ВыборкаДетальныеЗаписи.Код1);	
			Исключение
				ДобавитьЗаписьВЛогФайл(LogCatalog, ""+"Ошибка:" + ОписаниеОшибки());	
				ДобавитьЗаписьВЛогФайл(LogCatalog, "Не удалось "+ТипОперации+" запись Наименование1 = " + ВыборкаДетальныеЗаписи.Наименование1 + "; ИНН = " + ВыборкаДетальныеЗаписи.ИНН1+ "; CUSTOMER_ID = " + ВыборкаДетальныеЗаписи.Код1);	
				Connection.Close();
				RecordSet = Неопределено;
				Command = Неопределено;
			КонецПопытки;  
		КонецЦикла;
		//	Иначе
		//	Предупреждение("Уже установлено однозначное соответсвие ");
		//КонецЕсли;
		
		CUSTOMER_ACTUAL(ЭлементыФормы.CUSTOMER_ACTUAL);
		
		Попытка
			ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока = ТабличнаяЧастьКонтрагенты.Найти( ИНН,"ИНН1");
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМОЙ

Процедура ПриОткрытии()
	
	InitialCatalog = "csm_novgorod";
	DataSource = "sql-serv";
	UserID = "sa";
	Pwd = "12345";
	ТипКонтрагента = Истина;
	СопостовлятьПоКПП = Истина;
	ТипКонтрагентаПриИзменении();
	НачПериода = НачалоМесяца(ТекущаяДата());
	КонПериода = НачалоДня(КонецДня(ТекущаяДата())+1);
	ОсновноеУчреждение = Справочники.Организации.НайтиПоКоду("000001");
	ОсновнаяНоменклатураУслугиСвернутая = Справочники.Номенклатура.НайтиПоНаименованию("Поверка средств измерений");
	ОсновнаяНоменклатураУслугиПоверка = Справочники.Номенклатура.НайтиПоНаименованию("Периодическая поверка");
	ОсновнаяНоменклатураУслугиКалибровка = Справочники.Номенклатура.НайтиПоНаименованию("Калибровка");
	ОсновнаяНоменклатураКомандировочные = Справочники.Номенклатура.НайтиПоНаименованию("Командировочные расходы");
	ОсновнаяНоменклатураТранспортныеРасходы = Справочники.Номенклатура.НайтиПоНаименованию("Транспортные расходы");
	ОсновнойКБК = Справочники.КБК.НайтиПоНаименованию("00000000000000000");
	ОсновнойКОСГУДебета = Справочники.КОСГУ.НайтиПоКоду("560");
	ОсновнойКОСГУКредита = Справочники.КОСГУ.НайтиПоКоду("130");
	
	ЭлементыФормы.InitialCatalog.СписокВыбора.Добавить("csm_novgorod_test", "csm_novgorod_test");
	ЭлементыФормы.InitialCatalog.СписокВыбора.Добавить("csm_novgorod", "csm_novgorod");
	
	ФлажокСворачиватьСтрокиДокумента = Истина;
    ЭлементыФормы.СинхронизацияКонтрагентов.ТекущаяСтраница = ЭлементыФормы.СинхронизацияКонтрагентов.Страницы.Заказы;

	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПоле1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Вес0 		= 1 Тогда
	ИначеЕсли ДанныеСтроки.Вес0 = 2 Тогда
		ОформлениеСтроки.Ячейки.ИНН1.ЦветФона 		= WebЦвета.ШелковыйОттенок;
		ОформлениеСтроки.Ячейки.КПП1.ЦветФона 		= WebЦвета.ШелковыйОттенок;
		ОформлениеСтроки.Ячейки.Код1.ЦветФона 		= WebЦвета.ШелковыйОттенок;
	ИначеЕсли ДанныеСтроки.Вес0 = 3 Тогда	
		ОформлениеСтроки.Ячейки.ИНН1.ЦветФона 		= WebЦвета.АкварельноСиний;
		ОформлениеСтроки.Ячейки.КПП1.ЦветФона 		= WebЦвета.АкварельноСиний;
		ОформлениеСтроки.Ячейки.Код1.ЦветФона 		= WebЦвета.АкварельноСиний;
	ИначеЕсли ДанныеСтроки.Вес0 = 4 Тогда	
		ОформлениеСтроки.Ячейки.ИНН1.ЦветФона 		= WebЦвета.Бежевый;
		ОформлениеСтроки.Ячейки.КПП1.ЦветФона 		= WebЦвета.Бежевый;
		ОформлениеСтроки.Ячейки.Код1.ЦветФона 		= WebЦвета.Бежевый;
	Иначе
		ОформлениеСтроки.Ячейки.ИНН1.ЦветФона 		= WebЦвета.БледноМиндальный;
		ОформлениеСтроки.Ячейки.КПП1.ЦветФона 		= WebЦвета.БледноМиндальный;
		ОформлениеСтроки.Ячейки.Код1.ЦветФона 		= WebЦвета.БледноМиндальный;
	КонецЕсли;		
	
	Если ДанныеСтроки.Вес1 		= 1 Тогда
	ИначеЕсли ДанныеСтроки.Вес1 = 2 Тогда
		ОформлениеСтроки.Ячейки.ИНН0.ЦветФона 		= WebЦвета.ШелковыйОттенок;
		ОформлениеСтроки.Ячейки.КПП0.ЦветФона 		= WebЦвета.ШелковыйОттенок;
		ОформлениеСтроки.Ячейки.Код0.ЦветФона 		= WebЦвета.ШелковыйОттенок;
	ИначеЕсли ДанныеСтроки.Вес1 = 3 Тогда	
		ОформлениеСтроки.Ячейки.ИНН0.ЦветФона 		= WebЦвета.АкварельноСиний;
		ОформлениеСтроки.Ячейки.КПП0.ЦветФона 		= WebЦвета.АкварельноСиний;
		ОформлениеСтроки.Ячейки.Код0.ЦветФона 		= WebЦвета.АкварельноСиний;
	ИначеЕсли ДанныеСтроки.Вес1 = 4 Тогда	
		ОформлениеСтроки.Ячейки.ИНН0.ЦветФона 		= WebЦвета.Бежевый;
		ОформлениеСтроки.Ячейки.КПП0.ЦветФона 		= WebЦвета.Бежевый;
		ОформлениеСтроки.Ячейки.Код0.ЦветФона 		= WebЦвета.Бежевый;
	Иначе
		ОформлениеСтроки.Ячейки.ИНН0.ЦветФона 		= WebЦвета.БледноМиндальный;
		ОформлениеСтроки.Ячейки.КПП0.ЦветФона 		= WebЦвета.БледноМиндальный;
		ОформлениеСтроки.Ячейки.Код0.ЦветФона 		= WebЦвета.БледноМиндальный;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Код1) И ЗначениеЗаполнено(ДанныеСтроки.OneC_ID) Тогда
		Если ДанныеСтроки.Код0 = ДанныеСтроки.OneC_ID Тогда
			ОформлениеСтроки.Ячейки.Код0.ЦветФона 		 = WebЦвета.СветлоЗеленый;
			ОформлениеСтроки.Ячейки.OneC_ID.ЦветФона = WebЦвета.СветлоЗеленый;
			ОформлениеСтроки.Ячейки.Сопоставлен.ЦветФона = WebЦвета.СветлоЗеленый;
		КонецЕсли;		
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ДанныеСтроки.КПП0) И ЗначениеЗаполнено(ДанныеСтроки.КПП1) Тогда
		Если ДанныеСтроки.КПП0 <> ДанныеСтроки.КПП1 Тогда
			ОформлениеСтроки.Ячейки.КПП0.ЦветФона 		= WebЦвета.СветлоРозовый;
			ОформлениеСтроки.Ячейки.КПП1.ЦветФона 		= WebЦвета.СветлоРозовый;
		КонецЕсли;		
	КонецЕсли;		
	
	Если ДанныеСтроки.Наименование0 <> ДанныеСтроки.Наименование1		= 1 Тогда
		ОформлениеСтроки.Ячейки.Наименование0.ЦветФона 		= WebЦвета.БледноЛиловый;
		ОформлениеСтроки.Ячейки.Наименование1.ЦветФона 		= WebЦвета.БледноЛиловый;
	КонецЕсли;		
	
	
КонецПроцедуры

Процедура ТабличноеПоле2ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Загружать Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , истина);
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ДанныеСтроки.АктОбОказанииУслуг) Тогда
		Если ДанныеСтроки.Дата1 <> ДанныеСтроки.Дата0 Тогда
			ОформлениеСтроки.Ячейки.Дата1.ЦветФона 		= WebЦвета.ШелковыйОттенок;
			ОформлениеСтроки.Ячейки.Дата0.ЦветФона 		= WebЦвета.ШелковыйОттенок;
		КонецЕсли;		
		
		Если ДанныеСтроки.Контрагент1 <> ДанныеСтроки.Контрагент0 Тогда
			ОформлениеСтроки.Ячейки.Контрагент0.ЦветФона 		= WebЦвета.Бежевый;
			ОформлениеСтроки.Ячейки.Контрагент1.ЦветФона 		= WebЦвета.Бежевый;
		КонецЕсли;		
		
		Если ДанныеСтроки.СуммаВсегоСНДС1 <> ДанныеСтроки.СуммаВсегоСНДС0 Тогда
			ОформлениеСтроки.Ячейки.СуммаВсегоСНДС1.ЦветФона 		= WebЦвета.ТусклоРозовый;
			ОформлениеСтроки.Ячейки.СуммаВсегоСНДС0.ЦветФона 		= WebЦвета.ТусклоРозовый;
		КонецЕсли;		
	Иначе
		ОформлениеСтроки.ЦветТекста 		= WebЦвета.ТемноГрифельноСиний;
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Контрагент1) И ЗначениеЗаполнено(ДанныеСтроки.OneC_ID) Тогда
		Если ДанныеСтроки.Контрагент0 = ДанныеСтроки.Контрагент1 Тогда
			ОформлениеСтроки.Ячейки.Контрагент0.ЦветФона = WebЦвета.СветлоЗеленый;
			ОформлениеСтроки.Ячейки.Контрагент1.ЦветФона = WebЦвета.СветлоЗеленый;
		КонецЕсли;		
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Контрагент1) Тогда
		Если ДанныеСтроки.Контрагент1.Код = ДанныеСтроки.OneC_ID Тогда
			ОформлениеСтроки.Ячейки.Контрагент1.ЦветФона = WebЦвета.СветлоЗеленый;
		КонецЕсли;		
	КонецЕсли;		
	
	Если Найти(ДанныеСтроки.Комментарий,"!") Тогда
		ОформлениеСтроки.Ячейки.Комментарий.ЦветФона = WebЦвета.ТусклоРозовый;
	КонецЕсли;		
	
КонецПроцедуры

Процедура ТипКонтрагентаПриИзменении()
	
	Если ТипКонтрагента Тогда
		ЭлементыФормы.ТипКонтрагента.Заголовок = "Юр лица";
	Иначе 	
		ЭлементыФормы.ТипКонтрагента.Заголовок = "Физ лица";
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗаказыНажатие(Элемент)
	
	Отбор = Новый Структура("Загружать",Истина);    
	МассивЗаказов = новый СписокЗначений; 
	МассивЗаказов = ТабличнаяЧастьЗаказы.НайтиСтроки(Новый Структура("Загружать",Истина));
	
	Если МассивЗаказов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("К загрузке элеменов: " + МассивЗаказов.Количество() + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	Для Каждого тМассив Из МассивЗаказов Цикл
		ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока = тМассив;
		СоздатьПерезаполнитьДокументУслугиОказанные(тМассив);
	КонецЦикла;   		
	
КонецПроцедуры

Процедура ОтметитьНеСозданныеНажатие(Элемент)
	
	Для Каждого сЗаказы Из ТабличнаяЧастьЗаказы Цикл 
		Если ЗначениеЗаполнено(сЗаказы.АктОбОказанииУслуг) Тогда
			сЗаказы.Загружать = Ложь;
		Иначе
			сЗаказы.Загружать = Истина;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура СнятьОтметкиНажатие(Элемент)
	
	Для Каждого сЗаказы Из ТабличнаяЧастьЗаказы Цикл 
		сЗаказы.Загружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтметкиНажатие(Элемент)
	
	Для Каждого сЗаказы Из ТабличнаяЧастьЗаказы Цикл 
		сЗаказы.Загружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура Кнопка1Нажатие(Элемент)
	тСтрока = ЭлементыФормы.ТабличноеПоле2.ТекущаяСтрока;
	Сообщить(тСтрока.АктОбОказанииУслуг.КВД);
КонецПроцедуры

Процедура ТабличноеПоле2Контрагент0Открытие(Элемент, СтандартнаяОбработка)
	СоздатьКонтрагента(ЭлементыФормы.ТабличноеПоле2.ТекущаяСтрока);
КонецПроцедуры

Процедура ТабличноеПоле2Контрагент1Открытие(Элемент, СтандартнаяОбработка)
	СоздатьКонтрагента(ЭлементыФормы.ТабличноеПоле2.ТекущаяСтрока);
КонецПроцедуры

Процедура ТабличноеПоле1Наименование0Открытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	тСтрока = ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока;
	Если ЗначениеЗаполнено(тСтрока.Контрагент0) Тогда
		тСтрока.Контрагент0.ПолучитьФорму().Открыть();
	Иначе
		СоздатьКонтрагента(тСтрока);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьENTITY_IDКонтрагента1CНажатие(Элемент)
	тСтрока = ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока;
	УстановитьУстановитьENTITY_IDКонтрагента1C(тСтрока);
КонецПроцедуры

Процедура ТабличноеПоле1нENTITY_ID0Открытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	тСтрока = ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока;
	УстановитьУстановитьENTITY_IDКонтрагента1C(тСтрока);
КонецПроцедуры

Процедура ТабличноеПоле1ПриАктивизацииСтроки(Элемент)
	
	тСтрока = ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока;
	Если ЗначениеЗаполнено(тСтрока.Контрагент0) Тогда
		СтруктураРеквизитовК = Новый Структура("КИКонтрагента");
		ПолучениеНСИ.ПолучитьДанные(тСтрока.Контрагент0, ТекущаяДата(), СтруктураРеквизитовК);
		ЭлементыФормы.юАдрес0.Заголовок = СтруктураРеквизитовК.ЮрАдресКонтрагента;
		ЭлементыФормы.юАдрес1.Заголовок = тСтрока.Адрес1;
		
		ЭлементыФормы.фАдрес0.Заголовок = СтруктураРеквизитовК.ФактАдресКонтрагента;
		ЭлементыФормы.фАдрес1.Заголовок = тСтрока.фАдрес1;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОИСКА СПРАВОЧНИКОВ И ДОКУМЕНТОВ

Функция НайтиКонтрагентаПоРеквизитам(Код,ИНН,КПП,Наименование)
	
	КонтрагентСсылка = Справочники.Контрагенты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ПометкаУдаления = Ложь
	|	И Контрагенты.Код = &Код
	|	И Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Если НЕ ЗначениеЗаполнено(Код) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагенты.Код = &Код","");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагенты.ИНН = &ИНН","");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Код) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагенты.КПП = &КПП","");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Код) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагенты.Наименование = &Наименование","");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;		
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Функция НайтиОсновнойДоговорКонтрагента(Контрагент)
	
	ДоговорСсылка = Справочники.Договоры.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договоры.Ссылка
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	|	Договоры.Контрагент = &Контрагент
	|	И Договоры.ПометкаУдаления = Ложь
	|	И Договоры.ДоговорЗакрыт = Ложь
	|	И Договоры.Просрочен = Ложь";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;		
	
	Возврат Справочники.Договоры.ПустаяСсылка();
	
КонецФункции

Функция ВернутьДокументСсылкаПоРеквизиту(ДокументИмя, ДокументРеквизитИмя, РеквизитЗначение, ДокументДата, ПериодПоискаСтрока = "Месяц")
	
	ДокументИмяСсылка = Документы[ДокументИмя].ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Д.Ссылка
	|ИЗ
	|	Документ." + ДокументИмя + " КАК Д
	|ГДЕ
	|	Д." + ДокументРеквизитИмя + " = &РеквизитЗначение
	|	И Д.Дата МЕЖДУ &НачДатаПоиска И &КонДатаПоиска";
	
	Если ПериодПоискаСтрока = "Год" Тогда
		НачДатаПоиска = НачалоГода(ДокументДата);	
		КонДатаПоиска = КонецДня(КонецГода(ДокументДата))+1;	
	ИначеЕсли ПериодПоискаСтрока = "Месяц" Тогда	
		НачДатаПоиска = НачалоМесяца(ДокументДата);	
		КонДатаПоиска = КонецДня(КонецМесяца(ДокументДата))+1;	
	ИначеЕсли ПериодПоискаСтрока = "День" Тогда	
		НачДатаПоиска = НачалоДня(ДокументДата);	
		КонДатаПоиска = КонецДня(ДокументДата)+1;	
	КонецЕсли;		
	
	Запрос.УстановитьПараметр("НачДатаПоиска", НачДатаПоиска);
	Запрос.УстановитьПараметр("КонДатаПоиска", КонДатаПоиска);
	Запрос.УстановитьПараметр("РеквизитЗначение", РеквизитЗначение);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество()>1 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сообщить("Обнаружено больше одного документа!!!"+ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	Возврат ДокументИмяСсылка; 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОЗДАНИЯ СПРАВОЧНИКОВ И ДОКУМЕНТОВ

Процедура УстановитьУстановитьENTITY_IDКонтрагента1C(тСтрока, ЗадаватьВопрос = Истина)
	
	Если НЕ (тСтрока.Вес0 = 1 И тСтрока.Вес1 = 1) Тогда
		Если тСтрока.Вес1 = 1 И тСтрока.Вес0 > 1 Тогда
			Сообщить("Имеются двойники, будет установлена связь один-ко-многим");
		Иначе	
			Предупреждение("Невозможно установить соответсвие: Отсутсвует контрагент или имеются двойники");
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(тСтрока.Контрагент0) Тогда
		
		Если ЗадаватьВопрос Тогда
			Ответ = Вопрос("Будет установлена взаимосвязь контрагента " + тСтрока.Наименование1 +" в базах Метроконтроль и 1С" + Символы.ПС + тСтрока.Код1 +" = " + тСтрока.Код0+ Символы.ПС +"Продолжить?", РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
		
		Код0 = тСтрока.Код0;
		
		СтрокаСоединения = 
		"Provider=SQLOLEDB.1;
		|User ID="+UserID+";
		|Pwd="+Pwd+";
		|Data Source="+DataSource+";
		|Initial Catalog="+InitialCatalog+"";
		
		Если тСтрока.Вес0 = 1 Тогда
			//отклююченоЗапросSQL = "DELETE FROM "+InitialCatalog+".dbo.MATCH_TABLE " + " WHERE "+InitialCatalog+".dbo.MATCH_TABLE.OneC_ID = " +тСтрока.Код0+""; //удалять все по коду 1С
			ЗапросSQL = "DELETE FROM "+InitialCatalog+".dbo.MATCH_TABLE " + " WHERE "+InitialCatalog+".dbo.MATCH_TABLE.Metro_ID = " +тСтрока.Код1+"";//удалять только по коду Метро
		Иначе
			ЗапросSQL = "DELETE FROM "+InitialCatalog+".dbo.MATCH_TABLE " + " WHERE "+InitialCatalog+".dbo.MATCH_TABLE.Metro_ID = " +тСтрока.Код1+"";//удалять только по коду Метро
		КонецЕсли;
		
		ЗапросSQL = ЗапросSQL + 
		"USE "+InitialCatalog + 
		" if not exists (select * from ["+InitialCatalog+"].[dbo].[MATCH_TABLE] m where m.Metro_ID =  " +тСтрока.Код1+
		") insert into ["+InitialCatalog+"].[dbo].[MATCH_TABLE] (Metro_ID, OneC_ID) VALUES ( " +тСтрока.Код1+", '" +тСтрока.Код0+"')";
		
		ТипОперации = " Сопоставление: "; 
		
		Connection  = Новый COMОбъект("ADODB.Connection");
		Command     = Новый COMОбъект("ADODB.Command");
		RecordSet   = Новый COMОбъект("ADODB.RecordSet");
		
		Попытка
			Connection.Open(СокрЛП(СтрокаСоединения));
			Command.ActiveConnection   = Connection;
			
			Command.CommandText = ЗапросSQL;
			RecordSet = Command.Execute();
			Connection.Close();
			RecordSet = Неопределено;
			Command = Неопределено;
			ДобавитьЗаписьВЛогФайл(LogCatalog, ""+ТипОперации+" запись Наименование1 = " + тСтрока.Наименование1 + "; ИНН = " + тСтрока.ИНН1+ "; CUSTOMER_ID = " + тСтрока.Код1);	
		Исключение
			ДобавитьЗаписьВЛогФайл(LogCatalog, ""+"Ошибка:" + ОписаниеОшибки());	
			ДобавитьЗаписьВЛогФайл(LogCatalog, "Не удалось "+ТипОперации+" запись Наименование1 = " + тСтрока.Наименование1 + "; ИНН = " + тСтрока.ИНН1+ "; CUSTOMER_ID = " + тСтрока.Код1);	
			Connection.Close();
			RecordSet = Неопределено;
			Command = Неопределено;
		КонецПопытки;  
		
		//	Иначе
		//	Предупреждение("Уже установлено однозначное соответсвие ");
		//КонецЕсли;
		
		//			CUSTOMER_ACTUAL(ЭлементыФормы.CUSTOMER_ACTUAL);
		
		тСтрока.OneC_ID = тСтрока.Код0;
		ЭлементыФормы.ТабличноеПоле1.ТекущаяСтрока = ТабличнаяЧастьКонтрагенты.Найти(Код0,"Код0");
		
	КонецЕсли;
	
	//КонтрагентОбъект = тСтрока.Контрагент0.ПолучитьОбъект();
	//Если Не ЗначениеЗаполнено(КонтрагентОбъект.нENTITY_ID) Тогда
	//	КонтрагентОбъект.нENTITY_ID = тСтрока.Код1;
	//	КонтрагентОбъект.Записать();
	////	тСтрока.OneC_ID = КонтрагентОбъект.нENTITY_ID;
	//КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьПерезаполнитьДокументУслугиОказанные(тМассив)
	
	мДействиеСДокументом = "";
	мОшибкиДокумента = "";
	
	#Если Клиент Тогда
		Состояние("Обработка документов Акт об оказании услуг...");
	#КонецЕсли
	
	Если ЗначениеЗаполнено(тМассив.АктОбОказанииУслуг) Тогда
		Если Найти(тМассив.АктОбОказанииУслуг.Ссылка.Комментарий,мКомментарий) = 0 Тогда
			Ответ = Вопрос("Документ: " + тМассив.АктОбОказанииУслуг.Ссылка+" создан не автоматически, все реквизиты будут перезаполнены"+Символы.ПС +"Перезаполнить?", РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 	
		ДокОбъект = тМассив.АктОбОказанииУслуг.Ссылка.ПолучитьОбъект();
		мДействиеСДокументом = "Изменен ";
		мДокОбъектПроведен = ДокОбъект.Проведен;//Для запоминания состояния документа
	Иначе	
		ДокОбъект = Документы.УслугиОказанные.СоздатьДокумент();
		мДействиеСДокументом = "Создан ";
		мДокОбъектПроведен = Истина;//Новые проводить
	КонецЕсли;	
	
	ДокОбъект.Учреждение = ОсновноеУчреждение;
	ДокОбъект.Номер = тМассив.Номер;
	ДокОбъект.Дата  = тМассив.Дата1;
	ДокОбъект.СуммаВключаетНДС = Ложь;
	ДокОбъект.СуммаДокумента = тМассив.СуммаВсегоСНДС1;
	ДокОбъект.Контрагент = тМассив.Контрагент1;
	Если Не ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
		ДокОбъект.Договор = НайтиОсновнойДоговорКонтрагента(ДокОбъект.Контрагент);
	КонецЕсли;	
	ДокОбъект.ВидОперации = Справочники.ВидыОпераций.НайтиПоНаименованию("Реализация услуг (205.ХХ - 401.10.1ХХ)");
	ДокОбъект.КВД = Перечисления.КВД.Внебюджет;
	ДокОбъект.Баланс = Справочники.Баланс.НайтиПоНаименованию("средства юридических лиц");
	ДокОбъект.ВалютаДокумента = глЗначениеПеременной("глВалютаРегламентированногоУчета");
	ДокОбъект.КурсВзаиморасчетов = 1;
	ДокОбъект.КратностьВзаиморасчетов = 1;
	ДокОбъект.ВидПервичногоДокумента = "Акт об оказании услуг";
	ДокОбъект.МакетПервичногоДокумента = "АктВыполненныхУслуг";
	ДокОбъект.Комментарий = "Акт " + тМассив.Номер + " " + мКомментарий;
	
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Исполнитель) Тогда
		ДокОбъект.Исполнитель = ОбщегоНазначения.ИсполнительДокумента();
	КонецЕсли;
	
	ПолучитьТаблицуЗаписей_ORDER_POS(СокрЛП(тМассив.ORDER_ID));
	
	ДокОбъект.Услуги.Очистить();
	Для Каждого сТУ Из ТабличнаяЧастьУслуги Цикл
		
		нДокОбъектУслуги = ДокОбъект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(нДокОбъектУслуги,сТУ);
		Если Найти(нДокОбъектУслуги.Содержание,"Калибровка")>0 Тогда
			нДокОбъектУслуги.Номенклатура = ОсновнаяНоменклатураУслугиКалибровка;
		Иначе
			нДокОбъектУслуги.Номенклатура = ОсновнаяНоменклатураУслугиПоверка;
		КонецЕсли;	
		//нДокОбъектУслуги.Содержание = "";
		нДокОбъектУслуги.ЕдиницаИзмерения = нДокОбъектУслуги.Номенклатура.ЕдиницаИзмерения;
		//нДокОбъектУслуги.Количество = 1;
		нДокОбъектУслуги.Цена = сТУ.Цена * тМассив.КоэффициентНаценки;
		нДокОбъектУслуги.Сумма = нДокОбъектУслуги.Цена * нДокОбъектУслуги.Количество ;
		нДокОбъектУслуги.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		//нДокОбъектУслуги.СуммаНДС  = тМассив.СуммаНДС1;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(нДокОбъектУслуги, ДокОбъект);
		ОбработкаТабличныхЧастей.РассчитатьВсегоТабЧасти(нДокОбъектУслуги, ДокОбъект);
		
		нДокОбъектУслуги.СчетДебета = ПланыСчетов.ЕПСБУ.НайтиПоКоду("205.31");
		нДокОбъектУслуги.КБКСчетДебета = ОсновнойКБК;
		нДокОбъектУслуги.КОСГУСчетДебета = ОсновнойКОСГУДебета;
		нДокОбъектУслуги.СубконтоСчетКредита2 = Справочники.НаправленияДеятельности.НайтиПоКоду(сТУ.КодНаправленияДеятельности);
		нДокОбъектУслуги.СчетКредита = ПланыСчетов.ЕПСБУ.НайтиПоКоду("401.10");
		нДокОбъектУслуги.КБКСчетКредита = ОсновнойКБК;
		нДокОбъектУслуги.КОСГУСчетКредита = ОсновнойКОСГУКредита;
		нДокОбъектУслуги.СчетКредитаНУ = ПланыСчетов.ЕПСБУ.НайтиПоКоду("Н90.01");
		Если мОшибкиДокумента = ""  И Не ЗначениеЗаполнено(нДокОбъектУслуги.СубконтоСчетКредита2) Тогда
			мОшибкиДокумента = мОшибкиДокумента+"! Не сопоставлен КБК Метроконтроля";
		КонецЕсли;		
	КонецЦикла;
	
	//СверткаСтрок--------------------------------------------------	
	//Добавлено позже, когда уже было сделано по строкам
	Если ФлажокСворачиватьСтрокиДокумента Тогда
		КопияДокОбъектУслуги = ДокОбъект.Услуги.Выгрузить();		
		КопияДокОбъектУслуги.Свернуть("СчетДебета,КБКСчетДебета,КОСГУСчетДебета,СчетКредита,КБКСчетКредита,КОСГУСчетКредита,СубконтоСчетКредита2,СтавкаНДС,СчетКредитаНУ,СубконтоСчетКредитаНУ1","Количество,Сумма,СуммаНДС,Всего");
		ДокОбъект.Услуги.Очистить();
		ДокОбъект.Услуги.Загрузить(КопияДокОбъектУслуги);
		ДокОбъект.Услуги[0].Номенклатура = ОсновнаяНоменклатураУслугиСвернутая;
		ДокОбъект.Услуги[0].Количество = 1;
		ДокОбъект.Услуги[0].Цена = ДокОбъект.Услуги[0].Сумма;
	КонецЕсли;
	//СверткаСтрок--------------------------------------------------	
	
	Если тМассив.СуммаКомандировочныхБезНДС > 0 Тогда
		нДокОбъектУслуги = ДокОбъект.Услуги.Добавить();
		нДокОбъектУслуги.Номенклатура = ОсновнаяНоменклатураКомандировочные;
		//нДокОбъектУслуги.Количество = 1;
		//нДокОбъектУслуги.Цена = тМассив.СуммаКомандировочныхБезНДС * тМассив.КоэффициентНаценки;
		нДокОбъектУслуги.Сумма = тМассив.СуммаКомандировочныхБезНДС * тМассив.КоэффициентНаценки ;
		нДокОбъектУслуги.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(нДокОбъектУслуги, ДокОбъект);
		ОбработкаТабличныхЧастей.РассчитатьВсегоТабЧасти(нДокОбъектУслуги, ДокОбъект);
		
		нДокОбъектУслуги.СчетДебета = ПланыСчетов.ЕПСБУ.НайтиПоКоду("205.31");
		нДокОбъектУслуги.КБКСчетДебета = ОсновнойКБК;
		нДокОбъектУслуги.КОСГУСчетДебета = ОсновнойКОСГУДебета;
		нДокОбъектУслуги.СубконтоСчетКредита2 = Справочники.НаправленияДеятельности.НайтиПоКоду(сТУ.КодНаправленияДеятельности);
		нДокОбъектУслуги.СчетКредита = ПланыСчетов.ЕПСБУ.НайтиПоКоду("401.10");
		нДокОбъектУслуги.КБКСчетКредита = ОсновнойКБК;
		нДокОбъектУслуги.КОСГУСчетКредита = ОсновнойКОСГУКредита;
		нДокОбъектУслуги.СчетКредитаНУ = ПланыСчетов.ЕПСБУ.НайтиПоКоду("Н90.01");
	КонецЕсли;	
	
	Если тМассив.СуммаДоставкиБезНДС > 0 Тогда
		нДокОбъектУслуги = ДокОбъект.Услуги.Добавить();
		нДокОбъектУслуги.Номенклатура = ОсновнаяНоменклатураТранспортныеРасходы;
		//нДокОбъектУслуги.Количество = 1;
		//нДокОбъектУслуги.Цена = тМассив.СуммаДоставкиБезНДС * тМассив.КоэффициентНаценки;
		нДокОбъектУслуги.Сумма = тМассив.СуммаДоставкиБезНДС * тМассив.КоэффициентНаценки;
		нДокОбъектУслуги.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(нДокОбъектУслуги, ДокОбъект);
		ОбработкаТабличныхЧастей.РассчитатьВсегоТабЧасти(нДокОбъектУслуги, ДокОбъект);
		
		нДокОбъектУслуги.СчетДебета = ПланыСчетов.ЕПСБУ.НайтиПоКоду("205.31");
		нДокОбъектУслуги.КБКСчетДебета = ОсновнойКБК;
		нДокОбъектУслуги.КОСГУСчетДебета = ОсновнойКОСГУДебета;
		нДокОбъектУслуги.СубконтоСчетКредита2 = Справочники.НаправленияДеятельности.НайтиПоКоду(сТУ.КодНаправленияДеятельности);
		нДокОбъектУслуги.СчетКредита = ПланыСчетов.ЕПСБУ.НайтиПоКоду("401.10");
		нДокОбъектУслуги.КБКСчетКредита = ОсновнойКБК;
		нДокОбъектУслуги.КОСГУСчетКредита = ОсновнойКОСГУКредита;
		нДокОбъектУслуги.СчетКредитаНУ = ПланыСчетов.ЕПСБУ.НайтиПоКоду("Н90.01");
	КонецЕсли;	
	
	
	Если Не ЗначениеЗаполнено(ДокОбъект.Договор) Тогда
		мОшибкиДокумента = мОшибкиДокумента+"! Не найден Договор";
    КонецЕсли;
	
	Если мОшибкиДокумента <> "" Тогда
		ДокОбъект.Комментарий = мОшибкиДокумента + ДокОбъект.Комментарий;	
	КонецЕсли;
	
	
	Попытка
		ДокОбъект.Проведен = Истина; //Для обхода проверки в функции ЗаполнитьНаОсновании()
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		#Если Клиент Тогда
			ДобавитьЗаписьВЛогФайл(LogCatalog, "" + мДействиеСДокументом + ДокОбъект.Ссылка);	
		#КонецЕсли
		СоздатьСчетФактуру(тМассив, ДокОбъект); 
		
		Если Не мДокОбъектПроведен Тогда
			ДокОбъект.Проведен = Ложь;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		#Если Клиент Тогда
			ДобавитьЗаписьВЛогФайл(LogCatalog, "Не удалось " + мДействиеСДокументом + ДокОбъект.Ссылка);	
		#КонецЕсли
	КонецПопытки;
	
	Если ЗначениеЗаполнено(тМассив) Тогда 
		тМассив.АктОбОказанииУслуг = ДокОбъект.Ссылка;	
		тМассив.Дата0 = ДокОбъект.Ссылка.Дата;	
		тМассив.Контрагент0 = ДокОбъект.Ссылка.Контрагент;	
		тМассив.СуммаВсегоСНДС0 = ДокОбъект.Ссылка.СуммаДокумента;	
		Если мОшибкиДокумента <> "" Тогда
			тМассив.Комментарий = мОшибкиДокумента;	
		Иначе	
			тМассив.Комментарий = ДокОбъект.Ссылка.Комментарий;	
		КонецЕсли;
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

Процедура ПолучитьТаблицуЗаписей_ORDER_POS(ORDER_ID)
	ТабличнаяЧастьУслуги.Очистить();
	ЗагрузитьТаблицу("ORDER_POS_ACTUAL","
	|SELECT 
	|		m.OneC_ID,
	|		t.DEPARTMENT_ID,
	|		t.WORK_TYPE_NAME, 
	|		t.DEVICE_NAME, 
	|		t.DEVICE_MARK, 
	|		t.TARIF_ACTUAL,
	|		t.QTY
	|	FROM 
	|	( 
	|	
	|	SELECT  
	|		dp.DEPARTMENT_ID,
	|		w.WORK_TYPE_NAME, 
	|		d.DEVICE_NAME, 
	|		d.DEVICE_MARK, 
	|		CAST(p.TARIF_ACTUAL  as decimal(10,2)) TARIF_ACTUAL,
	|		p.QTY
	|		
	|	  FROM ORDER_POS_ACTUAL p
	|	  LEFT JOIN DEVICE_TYPE_LOCAL d ON p.DT_ID = d.DT_ID
	|	  LEFT JOIN WORK_TYPE_ACTUAL w ON p.WORK_TYPE_ID = w.WORK_TYPE_ID
	|	  LEFT JOIN DEPARTMENT_ACTUAL dp ON p.DEPARTMENT_ID = dp.DEPARTMENT_ID
	|	  WHERE ORDER_ID = "+ORDER_ID+"
	|	) t
	|	  LEFT JOIN MATCH_TABLE_DEPARTMENT m ON m.Metro_ID = t.DEPARTMENT_ID	
	//	|  AND p.DELETE_DATE <> NULL
	|  ");
	
КонецПроцедуры

Процедура СоздатьСчетФактуру(тМассив, ДокументОбъект, ВидСчетаФактуры = "НДС_СчетФактураВыданный") 
	
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);
	
	//Если (ДокументОбъект.ПометкаУдаления) И Не ЗначениеЗаполнено(СчетФактура) Тогда
	//	Предупреждение("Счет-фактуру нельзя вводить на основании документа, помеченного на удаление");
	//	Возврат;
	//КонецЕсли;
	
	ОбъектСчетаФактуры = Неопределено;
	
	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(СчетФактура)) Тогда
		//Вводим новый документ на основании нашего
		
		НужноПровести = Ложь;
		//Если НЕ ДокументОбъект.Проведен Тогда
		//	КодВозврата = Вопрос("Документ не проведен. Сначала следует провести документ.
		//						|Провести документ?",РежимДиалогаВопрос.ДаНет,60);
		//	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		//		Возврат;						
		//	КонецЕсли;						
		//	НужноПровести = Истина;
		//ИначеЕсли ДокументОбъект.Модифицированность() Тогда
		//	КодВозврата = Вопрос("Документ был изменен. Документ следует перепровести.
		//						|Провести документ?",РежимДиалогаВопрос.ДаНет,60);
		//	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		//		Возврат;						
		//	КонецЕсли;						
		//	НужноПровести = Истина;
		//КонецЕсли;
		
		Если НужноПровести Тогда
			
			//Попытка
			//	ФормаДокумента.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			//Исключение
			//	ОбщегоНазначения.СообщитьОбОшибке("Документ не удалось провести.",,,СтатусСообщения.Важное);
			//	Возврат;
			//КонецПопытки;	
			
		КонецЕсли;	
		
		//ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].ПолучитьФормуНовогоДокумента(, ФормаДокумента , Строка(ДокументОбъект));
		//ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка); 
		
		ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].СоздатьДокумент();
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка); 
		ОбъектСчетаФактуры.Номер = тМассив.Номер; 
		ОбъектСчетаФактуры.Комментарий = мКомментарий; 
		ОбъектСчетаФактуры.ЗаполнитьРеквизитыПодписей();
		ОбъектСчетаФактуры.Выставлен = Истина;
		ОбъектСчетаФактуры.ДатаВыставления = ОбъектСчетаФактуры.Дата;
		ОбъектСчетаФактуры.КодВидаОперации = "01";
		
		//		ФормаСчетаФактуры = ОбъектСчетаФактуры.ПолучитьФорму(, ФормаДокумента , Строка(ДокументОбъект));
		
		Попытка
			
			Если ДокументОбъект.Проведен Тогда
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Запись);
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	

			#Если Клиент Тогда
				ДобавитьЗаписьВЛогФайл(LogCatalog, "Записан " + ОбъектСчетаФактуры.Ссылка);	
			#КонецЕсли
		Исключение			
			#Если Клиент Тогда
				ДобавитьЗаписьВЛогФайл(LogCatalog, "Не удалось записать " + ОбъектСчетаФактуры.Ссылка);	
			#КонецЕсли
		КонецПопытки;
		
		Если ВидСчетаФактуры = "НДС_СчетФактураПолученный" Тогда
			Если ОбъектСчетаФактуры.ДокументыОснования.Количество() <> 0 Тогда
				//				ФормаСчетаФактуры.ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ОбъектСчетаФактуры.ДокументыОснования[0];
				//ОбъектСчетаФактуры.ЭлементыФормы.ДокументыОснования.ТекущаяСтрока = ОбъектСчетаФактуры.ДокументыОснования[0];
			КонецЕсли;
		КонецЕсли;
		
		// Откроем форму для редактирования счета-фактуры
		//	ФормаСчетаФактуры.Открыть(); 
		//ОбъектСчетаФактуры.Открыть(); 
	Иначе
		
		ОбъектСчетаФактуры = СчетФактура.ПолучитьОбъект();
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка); 
		ОбъектСчетаФактуры.Выставлен = Истина;
		ОбъектСчетаФактуры.ДатаВыставления = ОбъектСчетаФактуры.Дата;
		ОбъектСчетаФактуры.КодВидаОперации = "01";
		// Откроем форму для редактирования счета-фактуры
		//	СчетФактура.ПолучитьФорму(, ФормаДокумента , Строка(ДокументОбъект)).Открыть();
		
		Попытка
			Если ДокументОбъект.Проведен Тогда
				ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				Если СчетФактура.Проведен Тогда
					ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ОбъектСчетаФактуры.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;		
			КонецЕсли;	
			#Если Клиент Тогда
				ДобавитьЗаписьВЛогФайл(LogCatalog, "Записан " + ОбъектСчетаФактуры.Ссылка);	
			#КонецЕсли
		Исключение			
			#Если Клиент Тогда
				ДобавитьЗаписьВЛогФайл(LogCatalog, "Не удалось записать " + ОбъектСчетаФактуры.Ссылка);	
			#КонецЕсли
		КонецПопытки;
		
		
		
	КонецЕсли;
КонецПроцедуры // ВвестиСчетФактуру()

Процедура СоздатьКонтрагента(тСтрока)
	
	Если НЕ ЗначениеЗаполнено(тСтрока.Контрагент0) И НЕ ЗначениеЗаполнено(тСтрока.Контрагент1) Тогда
		СтандартнаяОбработка = Ложь;
		Ответ = Вопрос("Создать контрагента Наименование = " + тСтрока.Наименование1+"; ИНН = "+тСтрока.ИНН1, РежимДиалогаВопрос.ДаНет, 0);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
		
		нКонтрагент = НайтиКонтрагентаПоРеквизитам("", тСтрока.ИНН1,тСтрока.КПП1,тСтрока.Наименование1);
		Если (Не нКонтрагент.Пустая()) Тогда
			Ответ = Вопрос("По ИНН = " + тСтрока.ИНН1+" и КПП = " + тСтрока.КПП1+" найден Контрагент:"+нКонтрагент+Символы.ПС+"Перезаписать этого контрагента ", РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли;	
		сДействие = "Перезаписан";
		
		Если нКонтрагент.Пустая() Тогда
			нКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			сДействие = "Создан";
		Иначе	
			нКонтрагент = нКонтрагент.ПолучитьОбъект();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(тСтрока.ИНН1) И ЗначениеЗаполнено(тСтрока.КПП1) Тогда
			нКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация;
		ИначеЕсли ЗначениеЗаполнено(тСтрока.ИНН1) И Найти(тСтрока.Наименование1,Символ(34))>0 Тогда
			нКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Организация;
		Иначе	
			нКонтрагент.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизЛицо;
		КонецЕсли;
		
		нКонтрагент.Наименование = тСтрока.Наименование1;
		нКонтрагент.НаименованиеСокращенное = тСтрока.Наименование1;
		нКонтрагент.НаименованиеПолное = тСтрока.Наименование1;
		нКонтрагент.НаименованиеДП = тСтрока.Наименование1;
		нКонтрагент.НаименованиеРП = тСтрока.Наименование1;
		нКонтрагент.ИНН = тСтрока.ИНН1;
		нКонтрагент.КПП = тСтрока.КПП1;
		//	нКонтрагент.нENTITY_ID = тСтрока.Код1;
		
		Если Не РаботаСДиалогами.ЕстьДубльПоИНН(нКонтрагент) Тогда
			нКонтрагент.Записать();
		Иначе
			Сообщить("Есть дубль по ИНН="+тСтрока.ИНН1);
		КонецЕсли;
		
		Если СокрЛП(тСтрока.Адрес1) <> "" Тогда
			МенеджерЗаписи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи(); 
			//	МенеджерЗаписи.Период = Дата;
			МенеджерЗаписи.Объект = нКонтрагент.Ссылка; 
			МенеджерЗаписи.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес; 
			МенеджерЗаписи.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Юридический адрес контрагента"); 
			МенеджерЗаписи.Представление = тСтрока.Адрес1; 
			МенеджерЗаписи.ЗначениеПоУмолчанию = Истина; 
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		Если СокрЛП(тСтрока.фАдрес1) <> "" Тогда
			МенеджерЗаписи = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи(); 
			//	МенеджерЗаписи.Период=Дата;
			МенеджерЗаписи.Объект = нКонтрагент.Ссылка; 
			МенеджерЗаписи.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес; 
			МенеджерЗаписи.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Фактический адрес контрагента"); 
			МенеджерЗаписи.Представление = тСтрока.Адрес1; 
			МенеджерЗаписи.ЗначениеПоУмолчанию = Истина; 
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
		ДобавитьЗаписьВЛогФайл(LogCatalog, "" + сДействие + " Контрагент Наименование = " + тСтрока.Наименование1+"; ИНН = "+тСтрока.ИНН1+"; Код = "+нКонтрагент.Код);	
		тСтрока.Контрагент0 = нКонтрагент.Ссылка;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ТекстВДату(Знач СтроковоеЗначение, НомерСтроки, ИмяКолонки, Разделитель = ".")
	
	Цифры = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтроковоеЗначение,Разделитель);
	Попытка
		Результат = ?(СтрДлина(Цифры[2]) = 2, "20"+Цифры[2], Цифры[2]) 
		+ Формат(Цифры[1], "ЧЦ=2; ЧВН=;") 
		+ Формат(Цифры[0], "ЧЦ=2; ЧВН=;");
		Результат = Дата(Результат);
	Исключение
		Сообщить("" + НомерСтроки + ИмяКолонки + СтроковоеЗначение);
	КонецПопытки;
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЗаписьВЛогФайл(ПутьКФайлуПолный, ЛогСтрока, ДобавлятьВремя = Ложь, Сообщать = Истина) 
	
	Если Сообщать Тогда		
		Сообщить(ЛогСтрока);
	КонецЕсли;
	
	Если ПутьКФайлуПолный = "" ИЛИ ЛогСтрока  = "" тогда		
		Возврат -1;
	КонецЕсли;
	
	// если указан файл без пути - назначим путь - каталог программы
	Если Найти(ПутьКФайлуПолный, "\") = 0 тогда
		ПутьКФайлуПолный = КаталогПрограммы() + ПутьКФайлуПолный;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	кодировка = "UTF8" ;
	разделительСтрок = Символы.ВК + Символы.ПС; //Значение по умолчанию: ВК+ПС 
	
	МассивФайлов = НайтиФайлы(ПутьКФайлуПолный);		
	
	// если файл еще не создан добавим строку с именем файла
	Если МассивФайлов.Количество() = 0 тогда		
		ТекстовыйДокумент.ДобавитьСтроку(ПутьКФайлуПолный);	
	иначе 
		// если файл с таким именем уже создан прочитаем его
		ТекстовыйДокумент.Прочитать(ПутьКФайлуПолный,кодировка);			
	КонецЕсли;
	
	Если ДобавлятьВремя Тогда
		// добавим время к строке
		ЛогСтрока = "[" + ТекущаяДата() + "] " + ЛогСтрока; 
	КонецЕсли;
	// добавим строку в объект ТекстовыйДокумент
	ТекстовыйДокумент.ДобавитьСтроку(ЛогСтрока);
	// закрываем ТекстовыйДокумент файл
	ТекстовыйДокумент.Записать(ПутьКФайлуПолный,кодировка);
	
КонецФункции

Процедура СокрЛПНажатие(Элемент)
	Выборка = Справочники.Контрагенты.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.НаименованиеПолное <> СокрЛП(Выборка.НаименованиеПолное) Тогда
			Если Выборка.ЭтоГруппа Тогда 
				Продолжить;
			КонецЕсли;	
			оКонтрагент = Выборка.Ссылка.ПолучитьОбъект();
			оКонтрагент.НаименованиеПолное = СокрЛП(оКонтрагент.НаименованиеПолное);
			оКонтрагент.НаименованиеДП = СокрЛП(оКонтрагент.НаименованиеДП);
			оКонтрагент.НаименованиеРП = СокрЛП(оКонтрагент.НаименованиеРП);
			оКонтрагент.НаименованиеСокращенное = СокрЛП(оКонтрагент.НаименованиеСокращенное);
			оКонтрагент.Записать();
			Сообщить("Перезаписан "+Выборка.НаименованиеПолное);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура УстановитьСоответсвиеНажатие(Элемент)
	
	Для Каждого тСтрока Из ТабличнаяЧастьКонтрагенты Цикл 
		Если тСтрока.Наименование0 = тСтрока.Наименование1 Тогда
			Если тСтрока.Вес0 = 1 И  тСтрока.Вес1 = 1 Тогда
				Если НЕ тСтрока.Сопоставлен Тогда
					УстановитьУстановитьENTITY_IDКонтрагента1C(тСтрока, Ложь);
					Сообщить("Автоматически сопоставлены коды "+тСтрока.Наименование1 + " " + тСтрока.Код0 +"="+тСтрока.Код1);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Процедура InitialCatalogНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ФильтрСопоставленныеНажатие(Элемент)
	
	ФильтрСопоставленныеПереключить();
	
КонецПроцедуры

Процедура ФильтрСопоставленныеПереключить()
	
	Если ЭлементыФормы.ТабличноеПоле1.ОтборСтрок.Сопоставлен.Использование Тогда 
		ЭлементыФормы.ФильтрСопоставленные.Заголовок = "Показаны все контрагенты";
		ЭлементыФормы.ТабличноеПоле1.ОтборСтрок.Сопоставлен.Значение = Ложь; 
		ЭлементыФормы.ТабличноеПоле1.ОтборСтрок.Сопоставлен.Использование = Ложь;  
	Иначе
		ЭлементыФормы.ФильтрСопоставленные.Заголовок = "Включен фильтр только не сопоставленные";
		ЭлементыФормы.ТабличноеПоле1.ОтборСтрок.Сопоставлен.Значение = Ложь; 
		ЭлементыФормы.ТабличноеПоле1.ОтборСтрок.Сопоставлен.Использование = Истина;  
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьDEPARTMENT_IDПодразделенияC1Нажатие(Элемент)
	тСтрока = ЭлементыФормы.ТабличноеПоле3.ТекущаяСтрока;
	Если ЗначениеЗаполнено(тСтрока.НаправленияДеятельности) Тогда
		УстановитьDEPARTMENT_IDПодразделения(тСтрока);
		Сообщить("сопоставлен  "+тСтрока.НаправленияДеятельности);
	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьDEPARTMENT_IDПодразделения(тСтрока)
	
	
	Код0 = тСтрока.Код;
	
	СтрокаСоединения = 
	"Provider=SQLOLEDB.1;
	|User ID="+UserID+";
	|Pwd="+Pwd+";
	|Data Source="+DataSource+";
	|Initial Catalog="+InitialCatalog+"";
	
	ЗапросSQL = 
	"DELETE FROM "+InitialCatalog+".dbo.MATCH_TABLE_DEPARTMENT "+
	"	where "+InitialCatalog+".dbo.MATCH_TABLE_DEPARTMENT.Metro_ID =  " +тСтрока.Код+""+
	
	"USE "+InitialCatalog + 
	" if not exists (select * from ["+InitialCatalog+"].[dbo].[MATCH_TABLE_DEPARTMENT] m where m.Metro_ID =  " +тСтрока.Код+
	") insert into ["+InitialCatalog+"].[dbo].[MATCH_TABLE_DEPARTMENT] (Metro_ID, OneC_ID) VALUES ( " +тСтрока.Код+", '" +тСтрока.НаправленияДеятельности.Код+"')";
	
	ТипОперации = " Сопоставление: "; 
	
	Connection  = Новый COMОбъект("ADODB.Connection");
	Command     = Новый COMОбъект("ADODB.Command");
	RecordSet   = Новый COMОбъект("ADODB.RecordSet");
	
	Попытка
		Connection.Open(СокрЛП(СтрокаСоединения));
		Command.ActiveConnection   = Connection;
		
		Command.CommandText = ЗапросSQL;
		RecordSet = Command.Execute();
		Connection.Close();
		RecordSet = Неопределено;
		Command = Неопределено;
		ДобавитьЗаписьВЛогФайл(LogCatalog, ""+ТипОперации+" запись = " + тСтрока.НаправленияДеятельности);	
	Исключение
		ДобавитьЗаписьВЛогФайл(LogCatalog, ""+"Ошибка:" + ОписаниеОшибки());	
		ДобавитьЗаписьВЛогФайл(LogCatalog, "Не удалось "+ТипОперации+" запись = " + тСтрока.НаправленияДеятельности);	
		Connection.Close();
		RecordSet = Неопределено;
		Command = Неопределено;
	КонецПопытки;  
	
	//тСтрока.OneC_ID = тСтрока.Код0;
	
	
	
	DEPARTMENT_ACTUAL(ЭлементыФормы.DEPARTMENT_ACTUAL);
	ЭлементыФормы.ТабличноеПоле3.ТекущаяСтрока = ТабличнаяЧастьПодразделения.Найти(Код0,"Код");
	//КонтрагентОбъект = тСтрока.Контрагент0.ПолучитьОбъект();
	//Если Не ЗначениеЗаполнено(КонтрагентОбъект.нENTITY_ID) Тогда
	//	КонтрагентОбъект.нENTITY_ID = тСтрока.Код1;
	//	КонтрагентОбъект.Записать();
	////	тСтрока.OneC_ID = КонтрагентОбъект.нENTITY_ID;
	//КонецЕсли;	
	
КонецПроцедуры

Процедура ОсновнаяНоменклатураУслугиПоверка1ПриИзменении(Элемент)
	Сообщить(""+ОсновнойКБК.Код+" "+ОсновнойКБК.Наименование);
КонецПроцедуры

Процедура ПроверитьАктыНаПодчиненныеСФНажатие(Элемент)
	
	ВыборкаУО = Документы.УслугиОказанные.Выбрать(НачалоДня(НачПериода),КонецДня(КонПериода)+1);
	Пока ВыборкаУО.Следующий() Цикл
		ВыборкаСФ = ВернутьВыборкуПоПодчиненнымСчетамФактурам(ВыборкаУО.Ссылка) ;
		
		Если ВыборкаСФ.Количество()>1 Тогда
			Сообщить("! найдено более одной СФ " + ВыборкаУО + " к=" + ВыборкаСФ.Количество());	
		ИначеЕсли ВыборкаСФ.Количество() = 1 Тогда
			ВыборкаСФ.Следующий();
			Если НачалоДня(ВыборкаУО.Дата) <> НачалоДня(ВыборкаСФ.Ссылка.Дата) Тогда
				Сообщить("Дата: "+ВыборкаУО+" <> "+ВыборкаСФ.Ссылка);	
			КонецЕсли;
			Если Найти(ВыборкаУО.Номер,"\") > 0 Тогда
				Если СокрЛП(ВыборкаУО.Номер) <> СокрЛП(ВыборкаСФ.Ссылка.Номер) Тогда
					Сообщить("Номер: "+ВыборкаУО+" <> "+ВыборкаСФ.Ссылка);	
					//ОбъектВыборкаУО = ВыборкаУО.ПолучитьОбъект();
					//ОбъектВыборкаУО.Номер = СокрЛП(ВыборкаСФ.Ссылка.Номер);
					//Попытка
					//	ОбъектВыборкаУО.Записать();	
					//	Сообщить("Перезаписан: "+ВыборкаУО.Номер+" -> "+ОбъектВыборкаУО.Номер+" = "+ВыборкаСФ.Ссылка);	
					//Исключение
					//	Сообщить("Не записать: "+ВыборкаУО+" <> "+ВыборкаСФ.Ссылка);	
					//КонецПопытки;
					
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			//Сообщить(""+ВыборкаУО);	
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Функция ВернутьВыборкуПоПодчиненнымСчетамФактурам(Знач ДокументСсылка, ВидДокумента = "НДС_СчетФактураВыданный", Отбор="") Экспорт
	
	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;
	
	Запрос = Новый Запрос;
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ИЗ";
	
	Если ВидДокумента = "НДС_СчетФактураВыданный" Тогда
		Запрос.Текст = 	Запрос.Текст + "
		|	Документ.НДС_СчетФактураВыданный КАК СФ";
	Иначе
		Запрос.Текст = 	Запрос.Текст + "
		|	Документ.НДС_СчетФактураПолученный.ДокументыОснования КАК СФ";
	КонецЕсли;
	
	Запрос.Текст = 	Запрос.Текст + "
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для каждого КлючЗначение из Отбор Цикл
			Запрос.Текст = 	Запрос.Текст + "
			|	И СФ." + КлючЗначение.Ключ + " = " + КлючЗначение.Значение;
		КонецЦикла;	
	КонецЕсли;										
	
	Запрос.Текст = 	Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	СФ.Ссылка.ПометкаУдаления,
	|	СФ.Ссылка.Проведен УБЫВ,
	|	СФ.Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	//Если ВыборкаИзЗапроса.Следующий() Тогда
	//	НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	//КонецЕсли;
	
	Возврат ВыборкаИзЗапроса;
	
КонецФункции // НайтиПодчиненныйСчетФактуру()


мКомментарий = "#Создан автоматически";
LogCatalog = СтрЗаменить(ЭтотОбъект.ИспользуемоеИмяФайла,".epf",".log"); 
